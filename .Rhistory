install.packages("tictoc")
install.packages("stringr")
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
# Define the function to determine the fastest method
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Extract the elapsed time for each method
elapsed_times <- timing_log$elapsed
# Determine the method with the shortest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and elapsed time of the fastest method
fastest_method <- timing_log$section[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the name and elapsed time of the fastest method
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
install.packages("tweedie")
View(fastest_method_info)
View(cl)
View(df)
View(fastest_method_info)
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
# Define the function to determine the fastest method
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Extract the elapsed time for each method
elapsed_times <- timing_log$elapsed
# Determine the method with the shortest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and elapsed time of the fastest method
fastest_method <- timing_log$section[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the name and elapsed time of the fastest method
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Print the log to understand its structure
print(timing_log)
# Extract the elapsed time and section (method name) for each entry in the log
elapsed_times <- timing_log$elapsed
method_names <- timing_log$section
# Determine the method with the shortest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and elapsed time of the fastest method
fastest_method <- method_names[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the name and elapsed time of the fastest method
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
# Define the function to determine the fastest method
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Initialize vectors to store method names and elapsed times
method_names <- vector("character", length(timing_log))
elapsed_times <- vector("numeric", length(timing_log))
# Parse the log entries to extract method names and elapsed times
for (i in seq_along(timing_log)) {
# Split each log entry string into words
words <- strsplit(timing_log[[i]], " ")[[1]]
# The first word is the method name, and the second word is the elapsed time
method_names[i] <- words[1]
elapsed_times[i] <- as.numeric(sub("sec", "", words[3]))  # Remove 'sec' and convert to numeric
}
# Determine the method with the shortest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and elapsed time of the fastest method
fastest_method <- method_names[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the name and elapsed time of the fastest method
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
# Define the function to determine the fastest method
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Initialize vectors to store method names and elapsed times
method_names <- vector("character", length(timing_log))
elapsed_times <- vector("numeric", length(timing_log))
# Parse the log entries to extract method names and elapsed times
for (i in seq_along(timing_log)) {
# Extract the method name and elapsed time from each log entry string
method_name <- str_extract(timing_log[[i]], "^[^:]+")
elapsed_time <- as.numeric(str_extract(timing_log[[i]], "\\d+\\.\\d+"))
# Store the method name and elapsed time
method_names[i] <- method_name
elapsed_times[i] <- elapsed_time
}
# Determine the method with the shortest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and elapsed time of the fastest method
fastest_method <- method_names[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the name and elapsed time of the fastest method
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
View(fastest_method_info)
library(tictoc)
library(dplyr)
library(tidyr)
library(stringr)
# Define the function
determine_fastest_method <- function() {
# Retrieve the tic-toc log
timing_log <- tic.log()
# Vectors to store method names and elapsed times
method_names <- vector("character", length(timing_log))
elapsed_times <- vector("numeric", length(timing_log))
# Parse the log entries to extract method names and elapsed times
for (i in seq_along(timing_log)) {
# Extract the method name and elapsed time
method_name <- str_extract(timing_log[[i]], "^[^:]+")
elapsed_time <- as.numeric(str_extract(timing_log[[i]], "\\d+\\.\\d+"))
# Store the method name and elapsed time
method_names[i] <- method_name
elapsed_times[i] <- elapsed_time
}
# What is the fastest method? The one with the smallest elapsed time
fastest_method_index <- which.min(elapsed_times)
# Extract the name and the elapsed time of the fastest method
fastest_method <- method_names[fastest_method_index]
fastest_elapsed_time <- elapsed_times[fastest_method_index]
# Return the fastest method with how much time it takes
return(list(
method = fastest_method,
elapsed_time = fastest_elapsed_time
))
}
# Reset the tic-toc log to ensure it's empty before starting
tic.clearlog()
# Method 1 (solution as is)
tic("Method_1")
source("scripts/method_1.r")
toc(log = TRUE)
# Method 2 (parallel computing in the final loop)
tic("Method_2")
source("scripts/method_2.r")
toc(log = TRUE)
# Method 3 (MTweedieTests function rewritten to split the M simulations in >1 core)
tic("Method_3")
source("scripts/method_3.r")
toc(log = TRUE)
# Determine and print the fastest method
fastest_method_info <- determine_fastest_method()
print(paste("The fastest method is:", fastest_method_info$method,
"with an elapsed time of", fastest_method_info$elapsed_time, "seconds."))
