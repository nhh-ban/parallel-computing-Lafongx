### Final loop rewritten with parallel computing
# Assignment 1:
install.packages("rtweedie")
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
### Parallel computing
install.packages("parallel")
install.packages("doParallel")
library(parallel)
library(doParallel)
# 6 core cluster
cl <- makeCluster(6)
# Register the cluster
registerDoParallel(cl)
# Replace the original loop
df$share_reject <-
foreach(i = 1:nrow(df),
.combine = 'c') %dopar% {
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
}
install.packages("tweedie")
### Final loop rewritten with parallel computing
# Assignment 1:
install.packages("tweedie")
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
### Parallel computing
install.packages("parallel")
install.packages("doParallel")
library(parallel)
library(doParallel)
# 6 core cluster
cl <- makeCluster(6)
# Register the cluster
registerDoParallel(cl)
# Replace the original loop
df$share_reject <-
foreach(i = 1:nrow(df),
.combine = 'c') %dopar% {
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
}
# Stop the cluster
stopCluster(cl)
install.packages("tweedie")
### Original Script
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
install.packages("foreach")
install.packages("foreach")
### MTweedieTests function rewritten, split M simulations in more than one core
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2 rewritten
library(foreach)
library(doParallel)
Cores <- 6
# Register a parallel backend
cl <- makeCluster(Cores)
registerDoParallel(cl)
# Export simTweedieTest function
clusterExport(cl, "simTweedieTest")
# Load the tweedie library on each
clusterEvalQ(cl, library(tweedie))
# MTweedieTests function rewritten. Split M simulations in >1 core
MTweedieTests <- function(N, M, sig) {
# Parallelize the simulation. Parallelize the collection of p-values
results <- foreach(i = 1:M, .combine = 'c') %dopar% {
simTweedieTest(N)
}
# Calculate the proportion of p-values less than sig
sum(results < sig) / M
}
# Don't forget to stop the cluster at the end of your script
stopCluster(cl)
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
### MTweedieTests function rewritten, split M simulations in more than one core
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2 rewritten
library(foreach)
library(doParallel)
Cores <- 6
# Register a parallel backend
cl <- makeCluster(Cores)
registerDoParallel(cl)
# Export simTweedieTest function
clusterExport(cl, "simTweedieTest")
# Load the tweedie library on each
clusterEvalQ(cl, library(tweedie))
# MTweedieTests function rewritten. Split M simulations in >1 core
MTweedieTests <- function(N, M, sig) {
# Parallelize the simulation. Parallelize the collection of p-values
results <- foreach(i = 1:M, .combine = 'c') %dopar% {
simTweedieTest(N)
}
sum(results < sig) / M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Stop the cluster
stopCluster(cl)
### MTweedieTests function rewritten, split M simulations in more than one core
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2 rewritten
library(foreach)
library(doParallel)
Cores <- 6
# Register a parallel backend
cl <- makeCluster(Cores)
registerDoParallel(cl)
# Export simTweedieTest function
clusterExport(cl, "simTweedieTest")
# Load the tweedie library on each
clusterEvalQ(cl, library(tweedie))
# MTweedieTests function rewritten. Split M simulations in >1 core
MTweedieTests <- function(N, M, sig) {
# Parallelize the simulation. Parallelize the collection of p-values
results <- foreach(i = 1:M, .combine = 'c') %dopar% {
simTweedieTest(N)
}
sum(results < sig) / M
}
# Stop the cluster
stopCluster(cl)
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
### MTweedieTests function rewritten, split M simulations in more than one core
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2 rewritten
library(foreach)
library(doParallel)
Cores <- 6
# Register a parallel backend
cl <- makeCluster(Cores)
registerDoParallel(cl)
# Export simTweedieTest function
clusterExport(cl, "simTweedieTest")
# Load the tweedie library on each
clusterEvalQ(cl, library(tweedie))
# MTweedieTests function rewritten. Split M simulations in >1 core
MTweedieTests <- function(N, M, sig) {
# Parallelize the simulation. Parallelize the collection of p-values
results <- foreach(i = 1:M, .combine = 'c') %dopar% {
simTweedieTest(N)
}
sum(results < sig) / M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Stop the cluster
stopCluster(cl)
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
tweedie::rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
### Parallel computing
library(parallel)
library(doParallel)
# 6 core cluster
cl <- makeCluster(6)
# Register the cluster
registerDoParallel(cl)
# Replace the original loop
df$share_reject <-
foreach(i = 1:nrow(df),
.combine = 'c') %dopar% {
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
}
# Stop the cluster
stopCluster(cl)
